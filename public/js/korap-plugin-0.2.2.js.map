{"version":3,"sources":["dev/js/src/plugin/client.js"],"names":["cs","document","currentScript","response","obj","create","Object","this","_init","widgetID","window","name","server","getAttribute","_listener","_receiveMsg","bind","addEventListener","sendMsg","data","parent","postMessage","requestMsg","cb","id","s","i","Math","floor","random","toString","randomID","e","d","onMessage","log","code","msg","action","resize","de","documentElement","height","scrollHeight","scrollWidth","clientWidth","onload","KorAPlugin","pluginit"],"mappings":"AAyBA,aAEA,MAAMA,GAAKC,SAASC,eAEpB,WAWE,IAAIC,EAAW,GAEXC,EAAM,CAKRC,OAAS,WACP,OAAOC,OAAOD,OAAOE,MAAMC,SAM7BA,MAAQ,WAON,OANAD,KAAKE,SAAWC,OAAOC,KACvBJ,KAAKK,OAASZ,GAAGa,aAAa,gBAAkB,IAGhDN,KAAKO,UAAYP,KAAKQ,YAAYC,KAAKT,MACvCG,OAAOO,iBAAiB,UAAWV,KAAKO,WACjCP,MAITW,QAAU,SAAUC,GAClBA,EAAe,SAAIZ,KAAKE,SACxBC,OAAOU,OAAOC,YAAYF,EAAMZ,KAAKK,SAIvCU,WAAa,SAAUH,EAAMI,GAC3B,IAAIC,EAxCR,WACE,IAAIC,EAAI,GACR,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,GAAKE,KAAKC,MAAqB,GAAdD,KAAKE,SAAa,IAAIC,SAAS,IAElD,MAAO,IAAML,EAmCFM,GACTZ,EAAU,IAAIK,EACdrB,EAASqB,GAAMD,EACfhB,KAAKW,QAAQC,IAIfJ,YAAc,SAAUiB,GAEtB,IAAIC,EAAID,EAAEb,KAIV,GAAKc,EASL,GAAIA,EAAO,IAAX,CACE,IAAIT,EAAKS,EAAO,IACZ9B,EAASqB,KACXrB,EAASqB,GAAIS,UACN9B,EAASqB,SAKhBjB,KAAK2B,WACP3B,KAAK2B,UAAUD,IAMnBE,IAAM,SAAUC,EAAMC,GACpB9B,KAAKW,QAAQ,CACXoB,OAAS,MACTF,KAAOA,EACPC,IAAMA,KAQVE,OAAS,WACP,IAAIC,EAAKvC,SAASwC,gBACdC,EAASF,EAAGG,aAGZH,EAAGI,YAAcJ,EAAGK,cACtBH,GAAU,IAEZnC,KAAKW,QAAQ,CACXoB,OAAW,SACXI,OAAWA,MAMjBhC,OAAOoC,OAAS,WACdpC,OAAOqC,WAAarC,OAAOqC,YAAc3C,EAAIC,SAK7CK,OAAOqC,WAAWR,SAEd7B,OAAOsC,UACTtC,OAAOsC,SAAStC,OAAOqC,aAtH7B","sourcesContent":["/**\r\n * The plugin system is based\r\n * on registered widgets (iframes) from foreign services.\r\n * The client component is loaded independently\r\n * in a plugin and communicates with the embedding\r\n * KorAP service.\r\n *\r\n * @author Nils Diewald\r\n */\r\n\r\n/*\r\n* TODO:\r\n*   Some methods require bidirectional\r\n*   calling, like\r\n*   - getKoralQuery()\r\n*   this probably should be done using a callback,\r\n*   like fetch({data}, function () {}, '*'), that will\r\n*   add a unique ID to the message and will call on the cb\r\n*   once the answer to that message arrives.\r\n*/\r\n/*\r\n * When loading the script from a remote KorAP instance,\r\n * demand using integrity check:\r\n * https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\r\n */\r\n\"use strict\";\r\n\r\nconst cs = document.currentScript;\r\n\r\n(function () {\r\n\r\n  // Similar to randomID in server, but a bit cheaper\r\n  function randomID () {\r\n    let s = '';\r\n    for (let i = 0; i < 16; i++) {\r\n      s += Math.floor((Math.random()*16)%16).toString(16);\r\n    };\r\n    return '_' + s;\r\n  };\r\n\r\n  let response = {};\r\n  \r\n  let obj = {\r\n\r\n    /**\r\n     * Create new plugin\r\n     */\r\n    create : function () {\r\n      return Object.create(this)._init();\r\n    },\r\n\r\n    /*\r\n     * Initialize plugin\r\n     */\r\n    _init : function () {\r\n      this.widgetID = window.name;\r\n      this.server = cs.getAttribute('data-server') || '*';\r\n\r\n      // Establish the 'message' hook.\r\n      this._listener = this._receiveMsg.bind(this);\r\n      window.addEventListener(\"message\", this._listener);\r\n      return this;\r\n    },\r\n\r\n    // Send a message\r\n    sendMsg : function (data) {\r\n      data[\"originID\"] = this.widgetID;\r\n      window.parent.postMessage(data, this.server);\r\n    },\r\n\r\n    // Request data\r\n    requestMsg : function (data, cb) {\r\n      let id = randomID();\r\n      data[\"_id\"] = id;\r\n      response[id] = cb;\r\n      this.sendMsg(data);\r\n    },\r\n    \r\n    // Receive a call from the embedding platform.\r\n    _receiveMsg : function (e) {\r\n      // Get event data\r\n      let d = e.data;\r\n\r\n      // If no data given - fail\r\n      // (probably check that it's an assoc array)\r\n      if (!d)\r\n        return;\r\n\r\n      // TODO:\r\n      //   check e.origin and d[\"originID\"]!!!\r\n      //   probably against window.parent!\r\n\r\n      // There is an associated callback registered:\r\n      // call and remove the function\r\n      if (d[\"_id\"]) {\r\n        let id = d[\"_id\"];\r\n        if (response[id]) {\r\n          response[id](d);\r\n          delete response[id];\r\n        };\r\n        return;\r\n      };\r\n      \r\n      if (this.onMessage)\r\n        this.onMessage(d)\r\n    },\r\n    \r\n    /**\r\n     * Send a log message to the embedding KorAP\r\n     */\r\n    log : function (code, msg) {\r\n      this.sendMsg({\r\n        action : 'log',\r\n        code : code,\r\n        msg : msg\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Send a resize command to the\r\n     * embedding KorAP\r\n     */\r\n    resize : function () {\r\n      var de = document.documentElement;\r\n      var height = de.scrollHeight;\r\n\r\n      // Add assumed scrollbar height\r\n      if (de.scrollWidth > de.clientWidth) {\r\n        height += 14;\r\n      };\r\n      this.sendMsg({\r\n        'action' : 'resize',\r\n        'height' : height\r\n      });\r\n    }\r\n  };\r\n\r\n  // Create plugin on windows load\r\n  window.onload = function () {\r\n    window.KorAPlugin = window.KorAPlugin || obj.create();\r\n\r\n    // TODO:\r\n    //   Only do this in case of the client being opened\r\n    //   as a widget!\r\n    window.KorAPlugin.resize();\r\n\r\n    if (window.pluginit)\r\n      window.pluginit(window.KorAPlugin);\r\n  };\r\n\r\n})();\r\n\r\n"]}